/**
* The data api used as simulator to simulate the payloads sent from the devices
* It call the Ingest Api with payload with random data 
* @module data
* @return{Array} 2 items , the ingest call response , the generated data
*
*/
var http = require("http");
var subdomain = require("subdomain");
var log = require("log");
log.setLevel("INFO");

log.info("request  : " + JSON.stringify(request));
var query=request.parameters;
var id=query.id;
log.info("id  : " + id);

var config = require("./config");


        //Build the url of the ingest api
         const api = "https://"+config.subDomain+".scriptrapps.io/app/api/subscription/subscriber?auth_token="+config.dmpBrokerToken;
				log.info("Generated Ingest API : " + JSON.stringify(api));
       
        var randomDevice ={ id: '', id_wasp: id,lat: "-33.4008511", long: "-70.54576139" } 
        var randomValue = "WT";
				var value=getRandomValue(randomValue);
        //Generate random data to simulate the device data
        var dataSnap =
        {
            "id": randomDevice.id,
            "id_wasp":randomDevice.id_wasp,
            "id_secret":"696418FDC337DE58",
            
            "location": {
                "lat": randomDevice.lat,
                "lon": randomDevice.long
            },
            "sensor":randomValue,
            "value":value
          
        };
			 dataSnap[randomValue]=value;
        
        log.info("Generated Data : " + JSON.stringify(dataSnap));

        //Call the ingest api, with randomly generated data
        var callResult = http.request({
            "url": api,
            "method": "POST",
            "bodyString": JSON.stringify(dataSnap),
            "headers": {
                "Content-Type": "application/json"
            }
        });

       



/**
* Random Value deppending on val
* 
* @function getRandomInt
* @param {String} [val] the value name
* @return{Number} the generated Random Value
*
*/
function getRandomValue(val) {
    return getRandomInt(1,40);
}
/**
* Random Int limits included
* 
* @function getRandomInt
* @param {Number} [min] the minimum limit
* @param {Number} [max] the maximum limit
* @return{Number} the generated Random Int
*
*/
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
/**
* Random Arbitrary
* 
* @function getRandomArbitrary
* @param {Number} [min] the minimum limit
* @param {Number} [max] the maximum limit
* @return{Number} the generated Random Arbitrary
*
*/
function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}
