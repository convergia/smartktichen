var _= require("modules/underscore/underscore.js")._;
var emailAlert = require("app/entities/actions/emailOnAlert");
var msteamAlert = require("app/entities/actions/msteamOnAlert");
var utils = require("app/entities/utils");
var config = require("app/config/config");

var log = require("log");
log.setLevel("INFO");

function evaluateDevice(entry) {
  classicEvaluateDevice(entry);
  blocklyEvaluateDevice(entry);
}
function classicEvaluateDevice(entry) {
  try {
    var recordAsAlert = false;
    var alertType = [];
    log.info("[app/entities/deviceEvaluator] Start Proccessing Business rule")
    var decisions = utils.executeDecisionTable(config.businessRuleScript, entry);

   
    if(decisions && decisions.metadata && decisions.metadata.status == "failure") {
      throw e;
    } else {
      log.info("[app/entities/deviceevaluator] 1 Actions processing for event "+JSON.stringify(decisions));
      for(var i = 0; decisions && i < decisions.length; i++){

        if(decisions[i].sendEmail!==undefined){
log.info("[app/entities/deviceevaluator] sending e-mail");
          emailAlert.execute(null, entry, decisions[i].sendEmail);
        }
        if(decisions[i].msteam!==undefined){
log.info("[app/entities/deviceevaluator] sending msteam alert");
	        msteamAlert.execute( entry, decisions[i].msteam);
        }
        if(decisions[i].isAlert == "true"){
          recordAsAlert = true; 
          alertType.push(decisions[i].alertType);
        }
      }
    }
  } catch(e) {
    log.info("[app/entities/deviceevaluator] 2 Actions processing for event "+JSON.stringify(e));
  } finally {
    log.info("[app/entities/deviceevaluator] End Proccessing Business rule");
    log.info("[app/entities/deviceevaluator] Flag device event as alert: "+ recordAsAlert)
    if(recordAsAlert) {
      entry["event_type"].push("alert");
      entry["alert_type"] = alertType;

    }
  }
}
// blockly
var deviceManager = require("app/entities/deviceManager");
var le = {};//latest entries sent to the bloclky function

function blocklyEvaluateDevice(entry) {
  
  var latestEntries = deviceManager.getLatestDeviceEntry(entry.id);
  for(key in latestEntries){
    le["_le_"+key] = latestEntries[key];//le stands for latest entry
  }
  
  log.info("latest entries: "+JSON.stringify(le));

  try {
    var recordAsAlert = false;
    var alertType = [];
    log.info("[app/entities/deviceEvaluator] [blockly] Start Proccessing Business rule")

    //var decisions = utils.executeDecisionTable(config.businessRuleBlockly, entry);
    var blocklyrule = require(config.businessRuleBlockly);
    var decisions = blocklyrule.decisionRules(entry, le)

//log.info("[app/entities/deviceevaluator] decisions: "+);

    if(decisions && decisions.metadata && decisions.metadata.status == "failure") {
      throw e;
    } else {
      log.info("[app/entities/deviceevaluator] 1 [blockly] Actions processing for event "+JSON.stringify(decisions));
      for(var i = 0; decisions && i < decisions.length; i++){
        if(decisions[i].sendEmail!==undefined){
	        emailAlert.execute(null, entry, decisions[i].sendEmail);
        }
        if(decisions[i].msteam!==undefined){
	        msteamAlert.execute( entry, decisions[i].msteam);
        }
        if(decisions[i].isAlert == "true"){
          recordAsAlert = true; 
          alertType.push(decisions[i].alertType);
        }
      }
    }
  } catch(e) {
    log.info("[app/entities/deviceevaluator] 2 [blockly] Actions processing for event "+JSON.stringify(e));
  } finally {
    log.info("[app/entities/deviceevaluator] [blockly] End Proccessing Business rule");
    log.info("[app/entities/deviceevaluator] [blockly] Flag device event as alert: "+ recordAsAlert)
    if(recordAsAlert) {
      entry["event_type"].push("alert");
      entry["alert_type"] = alertType;

    }
  }
}
