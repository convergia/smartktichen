/**
* The external entry of the application for the devices and simulator to send the information to the app
* 
* @module Ingest
* @param {object} [loacation] the location of the device
* @param {Number} [loacation.lat] the latitude  of the device
* @param {Number} [loacation.lon] the longtude of the device
* @param {Number} [temperature] the Temperature as measured by the device
* @param {Number} [luminosity] the Luminosity as measured by the device
* @param {Number} [pressure] the Pressure as measured by the device
* @param {String} [id] the device id
* @return{boolean} the result of the operations
*
*/

var deviceManager=require("convergia-demo-app/entities/deviceManager");
var alertManager=require("convergia-demo-app/entities/alertManager");
var notificationManager=require("convergia-demo-app/entities/notificationManager");
var utils=require("convergia-demo-app/entities/utils");
var config = require("convergia-demo-app/entities/config");
var log = require("log");
log.setLevel("INFO");
try{
    //Ingest the request params or data
    var requestParams = request.body || request.parameters;
    if (typeof(requestParams) == "string") {
        requestParams = JSON.parse(requestParams);
    }
  
    log.info("requestParams : "+JSON.stringify(requestParams));
    var data = {
        "id":requestParams.id_wasp,
        "id_wasp":requestParams.id_wasp,
        "sensor_id":requestParams.id,
        "id_secret":requestParams.id_secret,
        "updated_filed":requestParams.sensor,
        location:""

    };

    data[requestParams.sensor]=requestParams.value;
    //build valid location if location not empty in params 
    if(requestParams.location && isNumeric(requestParams.location.lat) && isNumeric(requestParams.location.lon)){
        data.location=""+parseFloat(requestParams.location.lat).toFixed(4)+ "," +parseFloat(requestParams.location.lon).toFixed(4)
    }else{
        log.info("location for " + data.id_wasp + " " +  JSON.stringify(config.locations[data.id_wasp]));
      if(config.locations[data.id_wasp]){
        data.location=""+parseFloat(config.locations[data.id_wasp].lat).toFixed(4)+ "," +parseFloat(config.locations[data.id_wasp].lon).toFixed(4)
      }else{
        data.location=""+parseFloat(config.defaultLocation.lat).toFixed(4)+ "," +parseFloat(config.defaultLocation.lon).toFixed(4)
      }
       
    }
    
    //load latest event 
    var latestEvent=deviceManager.getDeviceLatestEvent(data.id)||{};
    log.info("latestEvent : "+JSON.stringify( latestEvent));
    
    //fill missing data from the latest event sent by the device
    data.location=data.location||latestEvent.location;
    data.id_wasp=data.id_wasp||latestEvent.id_wasp||"";
    data.id_secret=data.id_wasp||latestEvent.id_secret||"";
    data.TC=data.TC||latestEvent.TC||0;
    data.BAT=data.BAT||latestEvent.BAT||0;
    data.PLV1=data.PLV1||latestEvent.PLV1||0;
    data.PLV2=data.PLV2||latestEvent.PLV2||0;
    data.PLV3=data.PLV3||latestEvent.PLV3||0;
    data.SOIL2=data.SOIL2||latestEvent.SOIL2||0;
    data.ANE=data.ANE||latestEvent.ANE||0;
    data.STR=data.STR||latestEvent.STR||"";
    data.PRES=data.PRES||latestEvent.PRES||0;
    data.HUM=data.HUM||latestEvent.HUM||0;
    
    //if not location defined then delete it
    if(!data.location){
        delete data.location;
    }       
   
    log.info("data : "+JSON.stringify( data));

    //add the event
    var eventSaved = deviceManager.createDeviceEvent(data).metadata.status=="success";   
    
    //proccess the event to check if any alert if not the current request for gps data
    var alertProcessed=alertManager.processData(data);
    
    //publish the data to channel
    var dataPublished=notificationManager.publish(data);

    //return the result
    return  eventSaved && alertProcessed && dataPublished;
    
}catch(ex){
    throw ex;
}

/**
* Check if the number value not NaN
* 
* @function isNumeric
* @param {Number} [n] the number
* @return{boolean} true if n!= NaN , false otherwise
*
*/
function isNumeric(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}
